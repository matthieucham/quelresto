AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sonarqube Stack

Parameters:
  # Global Variables
  VPCID:
    Description: VPC ID
    Type: "AWS::EC2::VPC::Id"
  URIDockerImageNginx:
    Description: The uri of nginx docker image
    Type: String
  URIDockerImageWeb:
   Description: The uri of the web docker image
   Type: String
  MinInstanceCount:
    Description: How many instances of this task should we run across our cluster (min) ?
    Type: Number
  DesiredInstanceCount:
    Description: How many instances of this task should we run across our cluster (desired) ?
    Type: Number
  MaxInstanceCount:
    Description: How many instances of this task should we run across our cluster (max) ?
    Type: Number
  ScaleInCooldown:
    Type: Number
  ScaleOutCooldown:
    Type: Number
  ScaleTriggerType:
    Type: String
  ScaleTriggerThreshold:
    Type: Number
  LBPriority:
    Description: The priority to register with the Load Balancer listener
    Type: Number
  DBName:
    Description: RDS database name
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: True
  DBUsername:
    Description: DB username
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: True
  DBUserPassword:
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: True
  # EfsId:
  #   Type: String
  ClusterName:
    Type: String
  ECSHostSecurityGroup:
    Type: String
  InstanceRDSPort:
    Type: String
  InstanceRDSHostname:
    Type: String
  ListenerArn:
    Type: String

Resources:
  EC2EgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: 0.0.0.0/0
      GroupId: !Ref ECSHostSecurityGroup

  ServiceScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: !Ref MaxInstanceCount
      MinCapacity: !Ref MinInstanceCount
      ResourceId: !Join
        - '/'
        - - service
          - !Sub "${ClusterName}"
          - !GetAtt Service.Name
      # RoleARN: !GetAtt ServiceRole.Arn
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: ecs
    DependsOn: Service

  ServiceScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ServiceAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ServiceScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: !Ref ScaleTriggerThreshold
        ScaleInCooldown: !Ref ScaleInCooldown
        ScaleOutCooldown: !Ref ScaleOutCooldown
        PredefinedMetricSpecification:
          PredefinedMetricType: !Ref ScaleTriggerType

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerRule
    Properties:
      ServiceName: !Sub '${AWS::StackName}'
      Cluster: !Ref ClusterName
      # Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredInstanceCount
      TaskDefinition: !Ref TaskDefinition
      HealthCheckGracePeriodSeconds: 600
      LoadBalancers:
        - ContainerName: quelresto-nginx
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroupNginx
        # - ContainerName: quelresto-web
        #   ContainerPort: 8000
        #   TargetGroupArn: !Ref TargetGroupWeb

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: quelresto-nginx
          Essential: true
          Privileged: false
          Image: !Ref URIDockerImageNginx
          Memory: 2048
          PortMappings:
            - ContainerPort: 80
          Ulimits:
            - HardLimit: 65536
              Name: nofile
              SoftLimit: 65536
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "${AWS::StackName}-nginx"
              awslogs-region: !Ref AWS::Region
        - Name: quelresto-web
          Essential: true
          Privileged: false
          Image: !Ref URIDockerImageWeb
          Memory: 2048
          PortMappings:
            - ContainerPort: 8000
          Ulimits:
            - HardLimit: 65536
              Name: nofile
              SoftLimit: 65536
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "${AWS::StackName}-web"
              awslogs-region: !Ref AWS::Region
        # MountPoints:
        #   - ContainerPath: "/home/quelresto/web"
        #     SourceVolume: efs
          Environment:
            - Name: DEBUG
              Value: 0
            - Name: DJANGO_ALLOWED_HOSTS
              Value: '*'
            - Name: SQL_ENGINE
              Value: django.db.backends.postgresql_psycopg2
            - Name: SQL_DATABASE
              Value: !Ref DBName
            - Name: SQL_USER
              Value: !Ref DBUsername
            - Name: SQL_HOST
              Value: !Ref InstanceRDSHostname
            - Name: SQL_PORT
              Value: !Ref InstanceRDSPort
          Secrets:
            - Name: SECRET_KEY
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/quelresto-secret"
            - Name: SQL_PASSWORD
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/quelresto-db-password"
      # Volumes:
      #   - Name: efs
      #     DockerVolumeConfiguration:
      #       Scope : "task"
      #       Driver: "local"
      #       DriverOpts:
      #         type : "nfs"
      #         device: !Sub "${EfsId}.efs.${AWS::Region}.amazonaws.com:/"
      #         o: !Sub "addr=${EfsId}.efs.eu-central-1.amazonaws.com,nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport"


  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  TargetGroupNginx:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCID
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
  
  # TargetGroupWeb:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     VpcId: !Ref VPCID
  #     Port: 8000
  #     Protocol: HTTP
  #     Matcher:
  #       HttpCode: 200-299

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ListenerArn
      Priority: !Ref LBPriority
      Conditions:
        - Field: path-pattern
          Values:
            - "/*"
      Actions:
        - TargetGroupArn: !Ref TargetGroupNginx
          Type: forward
        # - TargetGroupArn: !Ref TargetGroupWeb
        #   Type: forward


  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:

  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  # ServiceRole:
  #   Type: AWS::IAM::Role
  #   Metadata:
  #     cfn_nag:
  #       rules_to_suppress:
  #         - id: F3
  #           reason: "Resource cannot be targeted since it is managed ones"
  #         - id: W11
  #           reason: "Resource cannot be targeted since it is managed ones"
  #   Properties:
  #     RoleName: !Sub "ecs-service-${AWS::StackName}"
  #     Path: /
  #     AssumeRolePolicyDocument: |
  #       {
  #         "Statement": [{
  #           "Effect": "Allow",
  #           "Principal": { "Service": [ "ecs.amazonaws.com","ecs-tasks.amazonaws.com" ]},
  #           "Action": [ "sts:AssumeRole" ]
  #         }
  #         ]
  #       }
  #     Policies:
  #       - PolicyName: !Sub "ecs-service-${AWS::StackName}"
  #         PolicyDocument:
  #           {
  #             "Version": "2012-10-17",
  #             "Statement": [{
  #                             "Effect": "Allow",
  #                             "Action": [
  #                               "ec2:AuthorizeSecurityGroupIngress",
  #                               "ec2:Describe*",
  #                               "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
  #                               "elasticloadbalancing:Describe*",
  #                               "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
  #                               "elasticloadbalancing:DeregisterTargets",
  #                               "elasticloadbalancing:DescribeTargetGroups",
  #                               "elasticloadbalancing:DescribeTargetHealth",
  #                               "elasticloadbalancing:RegisterTargets",
  #                             ],
  #                             "Resource": "*"
  #                           }]
  #           }

  EcsTaskExecutionRole:
   Type: AWS::IAM::Role
   Properties:
     Path: /
     RoleName:  !Sub "task-exec-${AWS::StackName}"
     AssumeRolePolicyDocument:
       Version: "2012-10-17"
       Statement:
         Effect: "Allow"
         Principal:
           Service:
             - "ecs-tasks.amazonaws.com"
         Action: "sts:AssumeRole"
     Policies:
       - PolicyName: !Sub "task-role-${AWS::StackName}-policy"
         PolicyDocument:
           Version: "2012-10-17"
           Statement:
             - Effect: "Allow"
               Action:
                 - ecr:GetAuthorizationToken
                 - ecr:BatchCheckLayerAvailability
                 - ecr:GetDownloadUrlForLayer
                 - ecr:BatchGetImage
                 - logs:CreateLogStream
                 - logs:PutLogEvents
               Resource: "*"
       - PolicyName: !Sub "ecs-secrets-${AWS::StackName}-policy"
         PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - ssm:GetParameters
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/quelresto-db-password"
            - Effect: "Allow"
              Action:
                - ssm:GetParameters
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/quelresto-secret"

